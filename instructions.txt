# loudometer
version 0.2.2

loudometer performs a simple task: It will listen to a nominated audio input device, and if the volume detected reaches a configurable threshold, it will fire a HTTP request. All configuration is in the file `config.json`. This file is generated the first time you run the script `loudometer.py`.


The HTTP request to push a button in Bitfocus Companion can be found at the bottom of the "Edit Button" menu in Companion. It will say something like:

	Hint: Control buttons with OSC or HTTP: /press/bank/1/2 to press this button remotely. OSC port 2626!

So to press button 1,2 we send a HTTP request to (the Bitfocus address)/press/bank/1/2.

On my machine, this is:

	http://127.0.0.1:8888/press/bank/1/2

This is the link that you want to copy into the "http_target" field in the configuration.

## Other Configuration Options

To put the script into a standby mode, set `active` to False. The script will keep listening, but it will not send HTTP requests.

`print_volume_every_second` will print the peak volume level second by second. Good for tuning the `volume_trigger_threshold` value.

`volume_trigger_threshold` is the value at which the script will send a HTTP request. It is calculated as the RMS of the audio stream.

`minimum_time_between_triggers_in_seconds` is what it says. The script will not send a HTTP request if a request was already sent in the recent past.



# Installing Python

Python is a programming language. Python programs, or 'scripts' are plain text files that are executed by a Python interpreter. The official Python interpreter can be downloaded from https://www.python.org/.

Download and install the latest stable Python release for your operating system (at the time of writing, version 3.11.3).

During the installation you may be asked if you want to add Python to your PATH variable. We may also be asked if we want `pip` installed. Say yes to both of these.

`pip` is the *Package Installer for Python*. It can be used to quickly install utility libraries that other scripts can use.


# Installing the dependencies

There are two dependencies that need to be installed to run this script. They can be installed by typing the following two commands into a command prompt.

	pip install requests
	pip install pyaudio

The `requests` library lets Python scripts send web requests. The `pyaudio` library lets Python scripts interact with sound devices.

To verify these dependencies are installed correctly, run the `test_dependencies.py` script in this folder. This script should print out the installed versions of pyaudio and requests. If you see a `ModuleNotFoundError`, then something is not installed correctly.


# Testing PyAudio

Now that PyAudio is installed, you can run the `test_pyaudio.py` script. This script will print out all the audio devices it can see, then exit. You should be able to see ouput like the following:

	Input Device id  0  -  G733 Gaming Headset: USB Audio (hw:1,0)
	Input Device id  1  -  HDA NVidia: HDMI 0 (hw:2,3)
	Input Device id  2  -  HDA NVidia: HDMI 1 (hw:2,7)
	Input Device id  3  -  HDA NVidia: HDMI 2 (hw:2,8)
	Input Device id  4  -  HDA NVidia: HDMI 3 (hw:2,9)
	Input Device id  5  -  HD-Audio Generic: ALC887-VD Analog (hw:3,0)
	Input Device id  6  -  HD-Audio Generic: ALC887-VD Digital (hw:3,1)
	Input Device id  7  -  HD-Audio Generic: ALC887-VD Alt Analog (hw:3,2)
	Input Device id  8  -  pulse
	Input Device id  9  -  default
	Press enter to close...

There may also be debug information before this output. This is generated by pyaudio and can be ignored if you get an Input Device list like shown.


# Running loudometer

Under normal operation, loudometer output should look something like this:

	Input Device id  0  -  G733 Gaming Headset: USB Audio (hw:1,0)
	Input Device id  1  -  HDA NVidia: HDMI 0 (hw:2,3)
	Input Device id  2  -  HDA NVidia: HDMI 1 (hw:2,7)
	Input Device id  3  -  HDA NVidia: HDMI 2 (hw:2,8)
	Input Device id  4  -  HDA NVidia: HDMI 3 (hw:2,9)
	Input Device id  5  -  HD-Audio Generic: ALC887-VD Analog (hw:3,0)
	Input Device id  6  -  HD-Audio Generic: ALC887-VD Digital (hw:3,1)
	Input Device id  7  -  HD-Audio Generic: ALC887-VD Alt Analog (hw:3,2)
	Input Device id  8  -  pulse
	Input Device id  9  -  default
	Enter the device ID number to listen to: 9
	20:11:09 INFO Starting to listen!
	20:11:10 INFO Highest Volume in the past second: 45
	20:11:11 INFO Highest Volume in the past second: 9
	20:11:12 INFO Highest Volume in the past second: 594
	20:11:13 INFO Highest Volume in the past second: 9
	20:11:14 INFO Highest Volume in the past second: 4
	20:11:15 INFO Highest Volume in the past second: 0
	20:11:16 INFO Highest Volume in the past second: 0
	20:11:17 INFO It's loud! Sending request to http://127.0.0.1:8888/press/bank/1/2
	20:11:17 INFO Highest Volume in the past second: 3026
	20:11:18 INFO Highest Volume in the past second: 9
	20:11:19 INFO Highest Volume in the past second: 4
	...

To force stop the script, press Ctrl+C.


# Sending UDP Commands from Bitfocus Companion

UDP stands for User-Datagram Protocol. It is a very low level high speed networking protocol, commonly used for real time multiplayer video games, video and voice (VoIP) calling, and in Bittorrent. It is very easy to set up and use, and Bitfocus Companion happens to have it as a connection.

Under the Connections tab, add the `Generic TCP and UDP Requests` or `tcp-udp` connection. Set the target IP to 127.0.0.1 and the target port to 36591 (this can be changed in the config file). Make sure to select "Connect with UDP". Hit save, and you can ignore the "Connecting..." status that appears.

You can now add an action called `tcp-udp: Send Command` to a button. Just enter the word "ARM" as the command for the on button, and "DISARM" as the command for the off button. The "Command End Character" should default to "LF - \n".

So while loudometer is running, it will print out messages like this when it receives one of those commands,

19:31:13 INFO Received ARM command from ('127.0.0.1', 58547)
19:31:16 INFO Received DISARM command from ('127.0.0.1', 58547)
